@model IEnumerable<Test_DotNetMVC.Models.Result.UserResultModel>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<head>
    <h1>Index</h1>
</head>


<p>
    <a asp-action="Create">Create New</a>
</p>

<body>
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.UserName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.UserEmail)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.UserPhone)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.UserAddress)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.SchoolNm)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.SexNm)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
    @foreach (var item in Model) {
            <tr>
                <td>
                        @Html.DisplayFor(modelItem => item.UserName)
                </td>
                <td>
                        @Html.DisplayFor(modelItem => item.UserEmail)
                </td>
                <td>
                        @Html.DisplayFor(modelItem => item.UserPhone)
                </td>
                <td>
                        @Html.DisplayFor(modelItem => item.UserAddress)
                </td>
                <td>
                        @Html.DisplayFor(modelItem => item.SchoolNm)
                </td>
                <td>
                        @Html.DisplayFor(modelItem => item.SexNm)
                </td>
                <td>
                        @*<button type="button" class="btn btn-primary" onclick="DeleteUser(1)" id="deleteBtn">delete</button>*@
                        <input type="button" onclick="DeleteUserTest(@Html.DisplayFor(modelItem => item.UserId))" value=" delete1">
                </td>   
            </tr>
    }
        </tbody>
    </table>

    <h1>Test tabulator</h1>
    <div id="example-table"></div>
    <div>
        <input type="button" id="accessBtn" value="UPDATE" onclick="updateBtnClick()" />
        <input type="button" id="addRowBtn" value="addRow" onclick="addRowBtnClick(table)" />
    </div>
    <div>
        <input type="text" id="currencyInput" onblur="formatCurrency(this)">
        <input type="number" id="currencyNumber" value="">
    </div>
    <div>
        <input type="file" name="file" />
    </div>
</body>
<script type="text/javascript">
    $(document).ready(function () {
        // Mã JavaScript của bạn ở đây
        console.log("Document is ready for this view!");
        
    });

    console.log("ViewBag", @Html.Raw(Json.Serialize(ViewBag)));


    function DeleteUserTest(id) {
        var userData = {
            Id: 1
            , UserNameTxt:"fwew"
            , UserNameFlg: "1"
            , BithdayTxt:"20231221"
            , Num01:11
            , Text01: "1234567891"
            , Text02: "aaaaa"
            , Num02:10000

        };
        console.log("userData", JSON.stringify(userData));

        $.ajax({
            url: "https://localhost:7218/Users/TestCheck", // URL của API
            method: "POST",
            dataType: "json",
            contentType: "application/json",
            data: JSON.stringify(userData),
            success: function (data) {
                // Xử lý kết quả thành công
                console.log("success", data);
                $("#result").html("<strong>Title:</strong> " + data.title);
                window.location.href = "https://localhost:7218/Users?Addresaaew=A001";
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log("Error:", errorThrown);
                console.log("Status:", textStatus);
                console.log("Response:", jqXHR.responseText);
                // Xử lý lỗi
                $("#result").html("<span style='color: red;'>Error loading data</span>");
            }
        });
    }
    function formatCurrency(_input) {
        let amountString = _input.value.replace(/[^\d]/g, ''); 
        let amount = parseInt(amountString, 10);

        if (!isNaN(amount)) {
            let formattedAmount = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'JPY'
            }).format(amount);

            _input.value = formattedAmount;
        } else {
            _input.value = '￥0';
        }

        // test money -> number
        document.getElementById("currencyNumber").value = convertCurrencyToNumber(document.getElementById("currencyInput").value);
    }
    
    function convertCurrencyToNumber(currencyString) {
        let numericString = currencyString.replace(/[^\d]/g, '');
        let numericValue = parseInt(numericString, 10);
        if (!isNaN(numericValue)) {
            return numericValue;
        } else {
            return null;
        }
    }
    

        // ------------------ Test tabulator ------------------
    var table = new Tabulator("#example-table", {
        layout: "fitColumns",
        selectable: false,
        columns: [
            { title: "No", formatter: "rownum", hozAlign: "center", width: 50 },
            {
                title: "MoneyEdit", field: "giaTri", editor: "input"
                , formatter: function (cell, formatterParams, onRendered) {
                    var value = cell.getValue();
                    return value ? "￥" + value.toLocaleString() : "￥0";
                }
                , formatterParams: {
                    decimal: ",",
                    symbol: "￥",
                    precision: 0,
                }
                , validator: ["numeric"]
                , cellEdited: function (cell) { moneyEditer(cell) }

            },
            { title: "SoLuong", field: "soLuong", editor: true, validator: ["numeric"] },
            { title: "Tong", field: "total", editor: false, validator: ["numeric"] },
            { title: "UserPhone", field: "userPhone", editor: true, validator: ["numeric"] },
            {
                title: "tinhtoan", field: "tinhtoan"
                , formatter: function (cell, formatterParams, onRendered) {
                    var value = cell.getValue();
                    return value ? "￥" + value.toLocaleString() : "￥0";
                }
                , formatterParams: {
                    decimal: ",",
                    symbol: "￥",
                    precision: 0,
                }
                , validator: ["numeric"]
            },
            { title: "Filename", field: "fileName", editor: false },
            {
                formatter: function () {
                    return "<label for='file-input'><i class='bi bi-search'></i></label>";
                }, width: 40, hozAlign: "center"
                , cellClick: function (e, cell) { handleIconClick(table, e, cell) }
            },
            {
                // CheckBox này dùng được
                title: "checkBoxTest", field: "sexId", hozAlign: "center"
                ,formatter: function (cell, formatterParams) {
                    return "<input type='checkbox'" + (cell.getValue() == 1 ? " checked" : "") + ">";
                },
                cellClick: function (e, cell) {
                    cell.setValue(cell.getValue() == 1 ? 0 : 1);
                }
            },
            {
                // CheckBox này đang lỗi
                title: "checkBoxEdit", field: "sexId", hozAlign: "center"
                , formatter:  customCheckBoxFormatter
                , editor: customCheckBoxEditor
                , headerSort: false
                //, formatter: function (cell, formatterParams) {
                //    var value = cell.getValue();
                //    var checkbox = document.createElement("input");
                //    checkbox.type = "checkbox";

                //    if (value == '1') {
                //        checkbox.checked = true;
                //    } else {
                //        checkbox.checked = false;
                //    }
                //    return checkbox;
                //}
                //, formatter: "tickCross"
                //, formatterParams: {
                //    allowEmpty: true,
                //    allowTruthy: false,
                //    tickElement: "<i class='fa fa-check'></i>",
                //    crossElement: "<i class='fa fa-times'></i>",
                //}
                //, headerFilter: function (headerValue, rowValue, rowData, filterParams) {
                //    var headerCheckbox = document.createElement("input");
                //    headerCheckbox.type = "checkbox";
                //    headerCheckbox.checked = false;
                //    headerCheckbox.addEventListener("change", function () {
                //        var rows = table.getRows();
                //        for (var i = 0; i < rows.length; i++) {
                //            var cell = rows[i].getCell("sexId");
                //            cell.setValue(headerCheckbox.checked);
                //        }
                //    });
                //    return headerCheckbox;
                //}
            },
            {
                title: "updateDate", field: "updateDateTime"
                , formatter: "datetime"
                , formatterParams : {
                    inputFormat: "yyyy-MM-ddTHH:mm:ss.SSS",
                    outputFormat: "yyyy/MM/dd",
                    invalidPlaceholder: "",
                    timezone: "America/Los_Angeles",
                }
            },
            { formatter: function(){
                    return "<i class='bi bi-trash'></i>";
                }, width: 40, hozAlign: "center", cellClick: function (e, cell) { trashIconClick(table, e, cell) } 
            },
            { title: "DeleteFlg", field: "deleteFlg", editor: true },
            {
                formatter: function () {
                    return "<i class='bi bi-palette'></i>";
                }, width: 40, hozAlign: "center", cellClick: function (e, cell) { rowColorChage(table, e, cell) }
            },
            //{ title: "UserAddress", field: "userAddress"
            //    , formatter: function (cell, formatterParams) {
            //        var container = document.createElement("div");
            //        container.className = "search-column";
            //        // Text
            //        var textElement = document.createElement("span");
            //        textElement.textContent = cell.getValue();
            //        // Icon
            //        var iconElement = document.createElement("i");
            //        iconElement.className = "bi bi-search search-icon";
            //        //iconElement.style.cursor = "pointer";
            //        iconElement.addEventListener("click", function (PointerEvent) {
            //            SearchIconClick(PointerEvent);
            //        });
            //        container.appendChild(textElement);
            //        container.appendChild(iconElement);
            //        return container;
            //    }
            //},
            { title: "SchoolNm", field: "schoolNm" },
            { title: "SexNm", field: "sexNm" },
            { title: "UserName", field: "userName" },
            { title: "UserEmail", field: "userEmail" },
            { title: "updateDateTimeview", field: "updateDateTime" },
            { title: "updateDateTime", field: "updateDateTime", visible: false, clipboard: true },

        ],
    });

    document.addEventListener("DOMContentLoaded", function () {
        var dataListFromServer = @Html.Raw(Json.Serialize(Model));
        console.log("dataListFromServer",dataListFromServer);
        if (dataListFromServer.length === 0) {
            let tmpList = [{
                deleteFlg: ""
                , schoolNm: ""
                , sexId: ""
                , sexNm: ""
                , updateDateTime: ""
                , userAddress: ""
                , userEmail: ""
                , userId: ""
                , userName: ""
                , userPhone: ""
                , giaTri: 0
                , soLuong: 0
            }] ;
            console.log("dqwdq", tmpList);
            table.setData(tmpList);
       }else{
            table.setData(dataListFromServer);
       }
        

    });

    table.on("tableBuilt", function () { 
        console.log("tableBuiltaaaaa", table.getDataCount());
    });
    
    let objdeleteRow = []
    function trashIconClick(table, e, cell) {
        let rowData = cell.getRow().getData();
        let getRow = cell.getRow()
        console.log(e, cell, rowData);
        //console.log(table);
        getRow.update({ "deleteFlg": "0" });
        objdeleteRow.push(getRow.getData());

        
        // getRow.getElement().style.display = 'none';   có thể giữ lại thông tin row nhưng không tính toán lại No
        getRow.delete();    // có thể tính toán lại No nhưng không thể gữ được thông tin row đã xóa( cần hỗ trợ thêm objdeleteRow)
    }

    function customCheckBoxFormatter(cell){
        console.log("customCheckBoxFormatter", cell);
            var value = cell.getValue();
            var checkbox = document.createElement("input");
            checkbox.type = "checkbox";

            if (value == '1') {
                checkbox.checked = true;
            } else {
                checkbox.checked = false;
            }
            return checkbox;
    }

    function customCheckBoxEditor(cell, onRendered, success, cancel, editorParams) {
        console.log("customCheckBoxEditor", cell);
        var checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.addEventListener("change", function () {
            success(checkbox.checked ? 1 : 0);
        });
        checkbox.checked = cell.getValue() === 1;
        return checkbox;
    }

    function rowColorChage(table, e, cell) {
        let getRow = cell.getRow()
        getRow.update({ "deleteFlg": "2" });
        getRow.getElement().style.background = 'black';
    }

    function moneyEditer(cell) {
        // let cellValue = cell.getValue();
        let getRow = cell.getRow().getData();
        let NumA = getRow.userPhone;
        let NumB = getRow.deleteFlg;
        let NumC = NumA * NumB;
        console.log(NumA, NumB, NumC);
        cell.getRow().update({ "tinhtoan": NumC });
        //let getRow

    }
    
    function updateBtnClick(){
        let tableData = table.getData();
        console.log("updateBtnClick", tableData);
        console.log("objdeleteRow", objdeleteRow);
        let dataListUpdate = [];
        tableData.forEach(item =>{
            if (item.deleteFlg == '0' || item.deleteFlg == '1') {
                dataListUpdate.push(item);
            }
        });
        objdeleteRow.forEach(item => {
            if (item.deleteFlg == '0' || item.deleteFlg == '1') {
                dataListUpdate.push(item);
            }
        });
        console.log("dataListUpdate", dataListUpdate);
    }

    function addRowBtnClick(_table) {
        let tmpList = {
            deleteFlg: ""
            , schoolNm: ""
            , sexId: ""
            , sexNm: ""
            , updateDateTime: ""
            , userAddress: ""
            , userEmail: ""
            , userId: ""
            , userName: ""
            , userPhone: ""
        };
        _table.addRow(tmpList);
    }

    function handleIconClick(table, e, cell) {
        let getRow = cell.getRow();
        console.log("handleIconClick", getRow);
        //var fileName = prompt("Enter file name:");
        //console.log("handleIconClick", fileName);
        var input = document.createElement("input");
        input.type = "file";
        input.name = "fileUpload"
        input.style.display = "none";
        input.addEventListener("change", function (event) {
            var selectedFile = event.target.files;
            console.log("Selected Files:", selectedFile);

            var formData = new FormData();
            formData.append("fileUpload", selectedFile[0]);

            fetch("https://localhost:7218/Users/UploadFile", {
                method:"POST",
                body: formData
            })
            .then(response => { response.json() })
            .then(data => {
                 console.log("UPLoad success", data);
            })
            .catch(err => {
                        console.log("UPLoad err", data);
            });

            getRow.update({ "fileName": selectedFile[0].name });
        });
        input.click();
    }

    // ------------------ -------- ------------------
</script>

<style>
    .search-column {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .search-icon {
        cursor: pointer;
    }
</style>

